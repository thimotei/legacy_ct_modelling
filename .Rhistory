custom_plot_theme()
# quick plot of simulated data
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = ct_value, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
stan_data_simulated
stan_data_simulated <- stan_data_fun(ext_ct_dt, simulated = TRUE)
stan_data_simulated
stan_data_fun <- function(input_data, simulated = FALSE) {
mn <- input_data[, min(ct_value_std, na.rm = TRUE)]
if(simulated == TRUE) {
mx <- 1
}
else {
mx <- input_data[, max(ct_value_std, na.rm = TRUE)]
}
stan_data <- list(N = input_data[, .N],
P = length(unique(input_data$id)),
id = input_data[, id],
day_rel = input_data[, t],
ct_value = ifelse(is.na(input_data$ct_value), -99, input_data$ct_value_std),
pcr_res = input_data[, pcr_res],
t_e = 0,
c_0 = (40 - mn)/(mx - mn),
c_lod = (40 - mn)/(mx - mn),
lmean = get_inc_period()$inc_mean_p[1],
lsd = get_inc_period()$inc_sd_p[2]
)
return(stan_data)
}
stan_data_simulated <- stan_data_fun(ext_ct_dt, simulated = TRUE)
stan_data_simulated
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = 0.1
)
# extracting draws and putting them nicely into a data.table
draws_dt <- as.data.table(fit_sim$draws())
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"], simulated = TRUE)
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
stan_data_simulated
ext_ct_dt
# simulating trajectories. all parameters are sampled from uniform distributions
# where the minimum and maximum of each are arguments of the simulating
# function
ext_ct_dt <- simulate_ct_trajectories(t_max = 30, t_stepsize = 1,
cp_min = 10, cp_max = 20,
cs_min = 20, cs_max = 30,
te_min = 1, te_max = 7,
tp_min = 1, tp_max =7,
ts_min = 1, ts_max = 7,
tlod_min = 5, tlod_max = 10,
sigma_obs = 1)
# quick plot of simulated data
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = ct_value, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
# saving the true parameters for comparison to estimated values
true_params <- ext_ct_dt[, .(id = unique(id),
cs = unique(cs),
cp = unique(cp),
te = unique(te),
tp = unique(tp),
ts = unique(ts),
tlod = unique(tlod))]
# sampling a "realistic size" subset of the data. I.e. between 3 and 8 samples
# at random times per person
ext_ct_dt_sample <- ext_ct_dt[, .SD[t %in% sample(.N, sample(3:8, 1))],
by = "id"]
# quick plot of subset of data
ext_ct_dt_sample %>%
ggplot(aes(x = t, y = ct_value)) +
geom_point() +
facet_wrap(vars(id)) +
custom_plot_theme()
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
#--- running inference
n.chains <- 4
stan_data_simulated <- stan_data_fun(ext_ct_dt, simulated = TRUE)
options(mc.cores = 8)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = 0.1
)
source("R/init_fun.R")
# extracting draws and putting them nicely into a data.table
draws_dt <- as.data.table(fit_sim$draws())
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"], simulated = TRUE)
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
ct_dt_draws
ct_dt_draws[id == 1]
ct_dt_draws[id == 1] %>% View()
stan_data_simulated
draws_dt
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"], simulated = TRUE)
# simulating trajectories. all parameters are sampled from uniform distributions
# where the minimum and maximum of each are arguments of the simulating
# function
ext_ct_dt <- simulate_ct_trajectories(t_max = 30, t_stepsize = 1,
cp_min = 10, cp_max = 20,
cs_min = 20, cs_max = 30,
te_min = 1, te_max = 7,
tp_min = 1, tp_max =7,
ts_min = 1, ts_max = 7,
tlod_min = 5, tlod_max = 10,
sigma_obs = 1)
# quick plot of simulated data
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = ct_value, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
# setting minimum and maximum values globally, as used multiple times
mn <- ext_ct_dt[, min(ct_value, na.rm = TRUE)]
mx <- ext_ct_dt[, max(ct_value, na.rm = TRUE)]
mn
mx
extract_ct_fits <- function(ct_dt_draws) {
ct_dt_out <- ct_dt_draws[, c("id", "time") := tstrsplit(variable, ",")] %>%
.[, id := str_remove(id, "ct\\[")] %>%
.[, time := str_remove(time, "]")] %>%
.[, time := as.numeric(time)] %>%
.[, id := factor(id)] %>%
.[, c("time", "iteration", "chain", "id", "value")] %>%
.[order(id, time)] %>%
.[,  value_unscaled := (mx - mn) * value + mn]
return(ct_dt_out)
}
stan_data_fun <- function(input_data) {
stan_data <- list(N = input_data[, .N],
P = length(unique(input_data$id)),
id = input_data[, id],
day_rel = input_data[, t],
ct_value = ifelse(is.na(input_data$ct_value), -99, input_data$ct_value_std),
pcr_res = input_data[, pcr_res],
t_e = 0,
c_0 = (40 - mn)/(mx - mn),
c_lod = (40 - mn)/(mx - mn),
lmean = get_inc_period()$inc_mean_p[1],
lsd = get_inc_period()$inc_sd_p[2]
)
return(stan_data)
}
simulate_ct_trajectories <- function(t_max, t_stepsize,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_stepsize)),
t = rep(t_input/t_stepsize, n),
c0 = sort(rep(rep(c0, n), t_max/t_stepsize)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_stepsize)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_stepsize)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_stepsize)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_stepsize)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_stepsize)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_stepsize))) %>%
.[, ct_value := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, ct_value_noisey := rtruncnorm(1, b = 40, mean = ct_value, sd = sigma_obs),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[(t < te + 1 | t > te + tp + ts + tlod + 1), pcr_res := 0] %>%
.[t > te & t < te + tp + ts + tlod + 1, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, ct_value_std := (ct_value_noisey - min(ct_value_noisey))/(40 - min(ct_value_noisey))]
return(out_dt)
}
# simulating trajectories. all parameters are sampled from uniform distributions
# where the minimum and maximum of each are arguments of the simulating
# function
ext_ct_dt <- simulate_ct_trajectories(t_max = 30, t_stepsize = 1,
cp_min = 10, cp_max = 20,
cs_min = 20, cs_max = 30,
te_min = 1, te_max = 7,
tp_min = 1, tp_max =7,
ts_min = 1, ts_max = 7,
tlod_min = 5, tlod_max = 10,
sigma_obs = 1)
# quick plot of simulated data
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = ct_value, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
# setting minimum and maximum values globally, as used multiple times
mn <- ext_ct_dt[, min(ct_value_noisey, na.rm = TRUE)]
mx <- ext_ct_dt[, max(ct_value_noisey, na.rm = TRUE)]
mn
mx
# saving the true parameters for comparison to estimated values
true_params <- ext_ct_dt[, .(id = unique(id),
cs = unique(cs),
cp = unique(cp),
te = unique(te),
tp = unique(tp),
ts = unique(ts),
tlod = unique(tlod))]
# sampling a "realistic size" subset of the data. I.e. between 3 and 8 samples
# at random times per person
ext_ct_dt_sample <- ext_ct_dt[, .SD[t %in% sample(.N, sample(3:8, 1))],
by = "id"]
# quick plot of subset of data
ext_ct_dt_sample %>%
ggplot(aes(x = t, y = ct_value)) +
geom_point() +
facet_wrap(vars(id)) +
custom_plot_theme()
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
#--- running inference
n.chains <- 4
stan_data_simulated <- stan_data_fun(ext_ct_dt, simulated = TRUE)
stan_data_simulated <- stan_data_fun(ext_ct_dt)
options(mc.cores = 8)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = init_fun
)
# extracting draws and putting them nicely into a data.table
draws_dt <- as.data.table(fit_sim$draws())
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"], simulated = TRUE)
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"])
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
#--- running inference
n.chains <- 4
stan_data_simulated <- stan_data_fun(ext_ct_dt)
options(mc.cores = 8)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = init_fun
)
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
#--- running inference
n.chains <- 4
stan_data_simulated <- stan_data_fun(ext_ct_dt)
options(mc.cores = 8)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = init_fun
)
# extracting draws and putting them nicely into a data.table
draws_dt <- as.data.table(fit_sim$draws())
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"])
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
ct_dt_draws_summary
ct_dt_draws_summary %>%
ggplot(aes(x = time)) +
geom_line(aes(y = me)) +
geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.2) +
#geom_point(data = ct_dt, aes(x = t, y = ct_value, colour = factor(pcr_res))) +
facet_wrap(vars(factor(id))) +
custom_plot_theme()
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
#--- running inference
n.chains <- 4
stan_data_simulated <- stan_data_fun(ext_ct_dt)
options(mc.cores = 8)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = init_fun
)
# extracting draws and putting them nicely into a data.table
draws_dt <- as.data.table(fit_sim$draws())
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
#--- running inference
n.chains <- 4
stan_data_simulated <- stan_data_fun(ext_ct_dt)
options(mc.cores = 8)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = init_fun
)
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
#--- running inference
n.chains <- 4
stan_data_simulated <- stan_data_fun(ext_ct_dt)
options(mc.cores = 8)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000,
init = init_fun
)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
seed = 123,
chains = 4,
iter_warmup = 1000,
iter_sampling = 2000
# init = init_fun
)
# extracting draws and putting them nicely into a data.table
draws_dt <- as.data.table(fit_sim$draws())
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"])
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
#--- simulating Ct trajectories, to test parameter recovery
library(data.table)
library(ggplot2)
library(truncnorm)
library(cmdstanr)
library(cowplot)
library(stringr)
library(purrr)
# loading all functions in package directory
files <- list.files("R", "*.R", full.names = TRUE)
walk(files, source)
# example of a single trajectory
t_max <- 30
t_step <- 1
t_input <- seq(1, t_max, t_step)
# free parameters in the model cp, cs, te, tp, ts, tlod
# fixed parameters in mechanistic model are c0 and clod, both fixed at 40
c0 <- 40
clod <- 40
# fixed parameters in statistical model are sigma_obs
sigma_obs_known <- 1
n <- 10 # total number of individuals being simulated
# simulating trajectories. all parameters are sampled from uniform distributions
# where the minimum and maximum of each are arguments of the simulating
# function
ext_ct_dt <- simulate_ct_trajectories(t_max = 30, t_stepsize = 1,
cp_min = 10, cp_max = 20,
cs_min = 20, cs_max = 30,
te_min = 1, te_max = 7,
tp_min = 1, tp_max = 7,
ts_min = 1, ts_max = 7,
tlod_min = 5, tlod_max = 10,
c0 = c0, clod = clod, n = n,
sigma_obs = 1)
# quick plot of simulated data
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = ct_value, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
# setting minimum and maximum values globally, as used multiple times
mn <- ext_ct_dt[, min(ct_value_noisey, na.rm = TRUE)]
mx <- ext_ct_dt[, max(ct_value_noisey, na.rm = TRUE)]
# saving the true parameters for comparison to estimated values
true_params <- ext_ct_dt[, .(id = unique(id),
cs = unique(cs),
cp = unique(cp),
te = unique(te),
tp = unique(tp),
ts = unique(ts),
tlod = unique(tlod))]
# sampling a "realistic size" subset of the data. I.e. between 3 and 8 samples
# at random times per person
ext_ct_dt_sample <- ext_ct_dt[, .SD[t %in% sample(.N, sample(3:8, 1))],
by = "id"]
# get time for first positive test per person
pos_test <- ext_ct_dt_sample[
pcr_res == 1, .SD[t == min(t)], by = "id"][,
.(id, t_first_pos = t)
]
ext_ct_dt_sample <- ext_ct_dt_sample[pos_test, on = "id"]
ext_ct_dt_sample[, t := t - t_first_pos]
# quick plot of subset of data
ext_ct_dt_sample %>%
ggplot(aes(x = t, y = ct_value)) +
geom_point() +
facet_wrap(vars(id)) +
custom_plot_theme()
# compiling model to test inference
mod <- cmdstan_model("stan/ct_trajectory_model_individual.stan",
include_paths = "stan")
#--- running inference
stan_data_simulated <- stan_data_fun(ext_ct_dt, likelihood = FALSE)
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 4,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000
# init = init_fun
)
options(mc.cores = parallel::detectCores())
parallel::detectCores()
# fitting the model - not very quick, as many iterations hit the
# max_tree_depth at the moment
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 4,
parallel_chains = 4,
iter_warmup = 1000,
iter_sampling = 1000
# init = init_fun
)
# extracting draws and putting them nicely into a data.table
draws_dt <- as.data.table(fit_sim$draws())
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt)
# round time first positive to the nearest day
ct_dt_draws <- ct_dt_draws[,
time_since_first_pos := as.integer(time_since_first_pos)
]
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(
ct_dt_draws, by = c("id", "time_since_first_pos")
)
# plotting summaries of fitted trajectories against simulated data
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt_sample)
