.[, ct := tstrsplit(variable, "\[")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, ct := tstrsplit(variable, "\\[")]
?str_remove()
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, ct := str_remove(ct, "[*")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, ct := str_remove(variable, "[*]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "[*]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\[*]")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove_all(variable, "\[*]")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "[")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "[]")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[*\\]")]
res_sim
ct.dt <- res_sim$ct %>%
data.table() %>%
melt(., measure.vars = patterns("V"),
variable.name = "t_test",
value.name = "ct") %>%
.[, id := 1:100, by = "t_test"] %>%
.[, t_test := as.numeric(str_remove(t_test, "V"))] %>%
.[, ct_original := (mx - mn) * ct + mn] %>%
.[order(id, t_test)] %>%
.[, t_test := t_test + 10]
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[*]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[*\\]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[")] %>%
.[, variable := str_remove(variable, "*]")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[")] %>%
.[, variable := str_remove(variable, "*\\]")]
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[*_]")]
.[, variable := str_remove(variable, "\\[")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[.*_]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[.*]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[.]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[*]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "\\[.*]")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "ct\\[ \\]")]
res_sim
]res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "ct\\[")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "ct\\[")] %>%
.[, variable := str_remove(variable, "]")]
.[, variable := str_remove(variable, "ct\\[")]
res_sim
res_sim
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "ct\\[")] %>%
.[, variable := str_remove(variable, "]")] %>%
setnames(., "variable", "iteration")
res_sim
res_sim
n.chains <- 100
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = replicate(n.chains, init_fun()),
fixed_param = TRUE
)
replicate(n.chains, init_fun()
)
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = replicate(n.chains, init_fun(), simplify = FALSE),
fixed_param = TRUE
)
n.chains <- 100
# replicating ordered parameters in Stan, making sure all timing values are well-ordered
init_fun <- function() list(list(
t_e = runif(1, 1, 5),
t_p = runif(1, 1, 10),
t_s = runif(1, 1, 10),
t_lod = runif(1, 12, 20),
c_p = runif(1, 0.1, 0.3),
c_s = runif(1, 0.7, 0.9)))
options(mc.cores = 1)
mod <- cmdstan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
n.chains <- 100
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = replicate(n.chains, init_fun(), simplify = FALSE),
fixed_param = TRUE
)
?sample()
# replicating ordered parameters in Stan, making sure all timing values are well-ordered
init_fun <- function(n.chains = 100) replicate(n.chains,
list(list(
t_e = runif(1, 1, 5),
t_p = runif(1, 1, 10),
t_s = runif(1, 1, 10),
t_lod = runif(1, 12, 20),
c_p = runif(1, 0.1, 0.3),
c_s = runif(1, 0.7, 0.9))),
simplify = FALSE)
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun(nchains)
fixed_param = TRUE
)
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun(nchains),
fixed_param = TRUE
)
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun(n.chains),
fixed_param = TRUE
)
init_fun(n.chains)
# replicating ordered parameters in Stan, making sure all timing values are well-ordered
init_fun <- function(n.chains = 100) replicate(n.chains,
list(
t_e = runif(1, 1, 5),
t_p = runif(1, 1, 10),
t_s = runif(1, 1, 10),
t_lod = runif(1, 12, 20),
c_p = runif(1, 0.1, 0.3),
c_s = runif(1, 0.7, 0.9)),
simplify = FALSE)
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun(n.chains),
fixed_param = TRUE
)
init_fun(n.chains)
# replicating ordered parameters in Stan, making sure all timing values are well-ordered
init_fun <- function(n.chains = 100) list(list(
t_e = runif(1, 1, 5),
t_p = runif(1, 1, 10),
t_s = runif(1, 1, 10),
t_lod = runif(1, 12, 20),
c_p = runif(1, 0.1, 0.3),
c_s = runif(1, 0.7, 0.9)))
# replicating ordered parameters in Stan, making sure all timing values are well-ordered
init_fun <- function(n.chains = 100) list(list(
t_e = runif(1, 1, 5),
t_p = runif(1, 1, 10),
t_s = runif(1, 1, 10),
t_lod = runif(1, 12, 20),
c_p = runif(1, 0.1, 0.3),
c_s = runif(1, 0.7, 0.9)))
options(mc.cores = 1)
mod <- cmdstan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
n.chains <- 100
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun(),
fixed_param = TRUE
)
# replicating ordered parameters in Stan, making sure all timing values are well-ordered
init_fun <- function() list(list(
t_e = runif(1, 1, 5),
t_p = runif(1, 1, 10),
t_s = runif(1, 1, 10),
t_lod = runif(1, 12, 20),
c_p = runif(1, 0.1, 0.3),
c_s = runif(1, 0.7, 0.9)))
options(mc.cores = 1)
mod <- cmdstan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
n.chains <- 100
fit_sim <- mod$sample(
chains = n.chains,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun(),
fixed_param = TRUE
)
res_sim <- fit_sim$draws(format = "df", variables = "ct") %>%
data.table() %>%
melt(measure.vars = patterns("ct")) %>%
.[, .chain := NULL] %>%
.[, .iteration := NULL] %>%
.[, .draw := NULL] %>%
.[, variable := str_remove(variable, "ct\\[")] %>%
.[, variable := str_remove(variable, "]")] %>%
setnames(., "variable", "iteration")
res_sim
res_sim
fit_sim$draws(format = "df", variables = "ct")
fit_sim$draws(format = "df")
fit_sim$draws(format = "df") %>% View()
n.chains
?sample()
fit_sim <- mod$sample(
chains = 100,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun(),
fixed_param = TRUE
)
fit_sim <- mod$sample(
chains = 100,
data = stan_data_simulated,
iter_warmup = 0,
iter_sampling = 1,
# init = init_fun(),
fixed_param = TRUE
)
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 100,
iter_warmup = 0,
iter_sampling = 1,
# init = init_fun(),
fixed_param = TRUE
)
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 100,
iter_warmup = 0,
iter_sampling = 1,
init = init_fun()
#fixed_param = TRUE
)
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 100,
iter_warmup = 0,
iter_sampling = 1
# init = init_fun()
#fixed_param = TRUE
)
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 100,
iter_warmup = 0,
iter_sampling = 1,
# init = init_fun()
fixed_param = TRUE
)
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 100,
iter_warmup = 1,
iter_sampling = 1,
# init = init_fun()
fixed_param = TRUE
)
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 1,
draws = 100,
iter_warmup = 1,
iter_sampling = 1,
# init = init_fun()
fixed_param = TRUE
)
fit_sim <- mod$sample(
data = stan_data_simulated,
chains = 1,
iter_warmup = 0,
iter_sampling = 100,
# init = init_fun()
fixed_param = TRUE
)
fit_sim
fit_sim %>% View()
ct.data %>% View()
mod <- stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan",
include_paths = "~/lshtm/legacy_ct_modelling/stan")
mod <- stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan")
mod <- stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan")
mod <- stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan")
mod <- stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan")
mod <- stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan")
library(data.table)
library(ggplot2)
library(cmdstanr)
library(stringr)
library(purrr)
library(cowplot)
source("R/stan_data_simulated.R")
source("R/ct_hinge.R")
source("R/custom_plot_theme.R")
ct.data <- fread("data/ct_values_clean.csv")
mx <- ct.data %>%
.[ct != "" & ct != "unknown", max(ct, na.rm = TRUE) %>% as.numeric]
mn <- ct.data %>%
.[ct != "", min(ct, na.rm = TRUE) %>% as.numeric]
stan_data_simulated <- stan_data_simulated(P_arg = 100, t_max = 40)
# replicating ordered parameters in Stan, making sure all timing values are well-ordered
init_fun <- function() list(list(
t_e = runif(1, 1, 5),
t_p = runif(1, 1, 10),
t_s = runif(1, 1, 10),
t_lod = runif(1, 12, 20),
c_p = runif(1, 0.1, 0.3),
c_s = runif(1, 0.7, 0.9)))
options(mc.cores = 1)
mod <- stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan")
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan")
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
mod <- rstan::stan_model("stan/ct_trajectory_simulate_data_non_hierarchical.stan", verbose = T)
