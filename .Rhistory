custom_plot_theme()
dt.t.peak.delta <- res_delta$t_p_mean %>%
reshape2::melt() %>%
data.table()
delta_t_peak <- dt.t.peak.delta %>%
ggplot() +
geom_density(aes(value), fill = "lightblue") +
#xlim(0, 45) +
labs(x = "Ct value", y = "Probability",
title = "Posterior distribution for peak Ct value") +
custom_plot_theme()
delta_t_peak
delta_c_peak
delta_c_peak <- dt.c.peak.delta %>%
ggplot() +
geom_density(aes(smp), fill = "lightblue") +
#xlim(0, 45) +
labs(x = "Ct value", y = "Probability",
title = "Posterior distribution for peak Ct value") +
custom_plot_theme()
delta_c_peak
delta_t_peak
extract(fit_delta, pars = "T_e") %>%
reshape2::melt(.) %>%
ggplot() +
geom_density(aes(value)) +
xlim(0, 10) +
labs(x = "Ct value", y = "Probability") +
facet_wrap(~Var2, scales = "free") +
custom_plot_theme()
extract(fit_delta, pars = "T_e") %>%
reshape2::melt(.)
fit_dt_delta_pooled <- as.data.frame(fit_delta, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
# .[, "time" := tstrsplit(variable, ",")] %>%
# .[, id := str_remove(id, "ct\\[")] %>%
.[, time := sort(rep(1:20, 1000))] %>%
# .[, time := str_remove(time, "*]")] %>%
# .[, iteration := 1:.N, by = "variable"] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
fit_dt_summary <- fit_dt_delta[, .(me = quantile(value, 0.5),
lo = quantile(value, 0.025),
hi = quantile(value, 0.975)),
by = c("id", "time")]
fit_dt_pooled_summary <- fit_dt_delta_pooled[, .(me = quantile(value, 0.5),
lo = quantile(value, 0.025),
hi = quantile(value, 0.975)),
by = time]
fit_dt_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = lo)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
#scale_y_reverse(lim = c(30, NA)) +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
fit_dt_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = lo)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
scale_y_reverse(lim = c(30, NA)) +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
fit_dt_pooled_summary
fit_dt_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = lo)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
#scale_y_reverse(lim = c(30, NA)) +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
fit_dt_pooled_summary
fit_dt_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = me)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
#scale_y_reverse(lim = c(30, NA)) +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
fit_dt_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = me)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
scale_y_reverse(lim = c(30, NA)) +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
mod <- rstan::stan_model("stan/ct_trajectory_model_individual.stan")
dt.ct.omicron.pooled <- dt.all[(voc == "omicron" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "day_rel")]
#--- fitting for omicron
stan_data_omicron <- stan_data_fun(dt.ct.omicron.pooled)
fit_omicron <- sampling(mod,
chains = 4,
data = stan_data_omicron,
iter = 2000)
stan_data_omicron
dt.ct.delta.pooled
stan_data_delta
stan_data_fun <- function(input_data) {
stan_data <- list(N = input_data[, .N],
P = input_data[, uniqueN(id)],
id = input_data[, id],
day_rel = input_data[, t_first_test],
ct_value = ifelse(is.na(input_data$ct_value_adjusted), -99, input_data$ct_scaled),
pcr_res = input_data[, as.numeric(result)],
# symp_rel = input_data[, max(onset_rel), by = c("id", "infection_id")][, V1],
# te_upper_bound = input_data[, .(te_upper_bound = unique(te_upper_bound)),
#                             by = id] %>% .[, te_upper_bound],
t_e = 0,
c_0 = (45 - mn)/(mx - mn),
c_lod = (45 - mn)/(mx - mn),
lmean = EpiNow2::incubation_periods[, mean],
lsd = EpiNow2::incubation_periods[, sd])
return(stan_data)
}
dt.ct.delta.pooled <- dt.all[(voc == "delta" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "day_rel")]
dt.ct.omicron.pooled <- dt.all[(voc == "omicron" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "day_rel")]
dt.ct.delta.pooled <- dt.all[(voc == "delta" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "t_first_test")]
dt.ct.omicron.pooled <- dt.all[(voc == "omicron" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "t_first_test")]
#--- fitting for delta
stan_data_delta <- stan_data_fun(dt.ct.delta.pooled)
mod <- rstan::stan_model("stan/ct_trajectory_model_pooled.stan")
#--- fitting for delta
stan_data_delta <- stan_data_fun(dt.ct.delta.pooled)
fit_delta <- sampling(mod,
chains = 1,
data = stan_data_delta,
iter = 2000)
fit_delta <- sampling(mod,
chains = 4,
data = stan_data_delta,
iter = 2000)
fit_dt_delta_pooled <- as.data.frame(fit_delta, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
# .[, "time" := tstrsplit(variable, ",")] %>%
# .[, id := str_remove(id, "ct\\[")] %>%
.[, time := sort(rep(1:20, 1000))] %>%
# .[, time := str_remove(time, "*]")] %>%
# .[, iteration := 1:.N, by = "variable"] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
fit_dt_summary <- fit_dt_delta[, .(me = quantile(value, 0.5),
lo = quantile(value, 0.025),
hi = quantile(value, 0.975)),
by = c("id", "time")]
fit_dt_pooled_summary <- fit_dt_delta_pooled[, .(me = quantile(value, 0.5),
lo = quantile(value, 0.025),
hi = quantile(value, 0.975)),
by = time]
fit_dt_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = me)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
scale_y_reverse(lim = c(30, NA)) +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
fit_dt_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = me)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
scale_y_reverse(lim = c(30, NA)) +
scale_y_reverse() +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
#--- fitting for omicron
stan_data_omicron <- stan_data_fun(dt.ct.omicron.pooled)
fit_omicron <- sampling(mod,
chains = 4,
data = stan_data_omicron,
iter = 2000)
fit_dt_omicron_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = me)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
scale_y_reverse(lim = c(30, NA)) +
scale_y_reverse() +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
fit_dt_omicron_pooled <- as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
# .[, "time" := tstrsplit(variable, ",")] %>%
# .[, id := str_remove(id, "ct\\[")] %>%
.[, time := sort(rep(1:20, 1000))] %>%
# .[, time := str_remove(time, "*]")] %>%
# .[, iteration := 1:.N, by = "variable"] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
fit_dt_omicron_pooled_summary <- fit_dt_omicron_pooled[, .(me = quantile(value, 0.5),
lo = quantile(value, 0.025),
hi = quantile(value, 0.975)),
by = time]
p2 <- fit_dt_omicron_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = me)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
scale_y_reverse(lim = c(30, NA)) +
scale_y_reverse() +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
p2
res_omicron <- extract(fit_omicron)
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled <- as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
# .[, "time" := tstrsplit(variable, ",")] %>%
# .[, id := str_remove(id, "ct\\[")] %>%
.[, time := sort(rep(1:20, 1000))] %>%
# .[, time := str_remove(time, "*]")] %>%
# .[, iteration := 1:.N, by = "variable"] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_omicron
as.data.frame(fit_omicron, pars = "ct")
as.data.frame(fit_omicron, pars = "ct") %>%
data.table()
as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct"))
fit_dt_omicron_pooled <- as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled
fit_dt_omicron_pooled %>% View()
hello <- as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
hello
hello
hello
hello
hello
as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))] %>%
.[, variable := NULL]
as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)]
as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))]
tmp <- as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))]
tmp
tmp2 <- as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))]
tmp2
tmp2
tmp2
tmp2
hello <- as.data.frame(fit_omicron, pars = "ct") %>%
data.table() %>%
melt(., measure.vars = patterns("ct")) %>%
.[, time := sort(rep(1:20, 1000))] %>%
.[, variable := NULL] %>%
.[, time := as.numeric(time)] %>%
.[, value := (mx - mn) * value + mn]
hello
fit_dt_omicron_pooled_summary <- fit_dt_omicron_pooled[, .(me = quantile(value, 0.5),
lo = quantile(value, 0.025),
hi = quantile(value, 0.975)),
by = time]
p2 <- fit_dt_omicron_pooled_summary %>%
ggplot() +
geom_line(aes(x = as.numeric(time), y = me)) +
geom_ribbon(aes(x = time, ymin = lo, ymax = hi, fill = "dodgerblue"), alpha = 0.1) +
#facet_wrap(~id) +
scale_y_reverse(lim = c(30, NA)) +
scale_y_reverse() +
#xlim(0, 10) +
custom_plot_theme(flip = TRUE)
ggsave("delta_c_peak.png",
delta_c_peak,
width = 6,
height = 6,
bg = "white")
library(data.table)
library(lubridate)
library(patchwork)
library(rstan)
library(cowplot)
library(stringr)
source("R/stan_data.R")
source("R/custom_plot_theme.R")
source("scripts/dry_vs_wet.R")
dt.ct <- fread("data/ct_values_updated_3.csv", drop = c("V7", "V8")) %>%
setnames(., c("Study number", "sample date", "swab type",
"Ct", "VOC"),
c("id", "date", "swab_type", "ct_value",
"voc")) %>%
.[, date := dmy(date)] %>%
.[voc == "Alpha", voc := "alpha"] %>%
.[voc == "Delta", voc := "delta"] %>%
.[voc == "Omicron", voc := "omicron"] %>%
.[voc == "OMicron", voc := "omicron"] %>%
.[voc == "Omicron/SGTF", voc := "omicron"] %>%
.[voc == "S gene present", voc := "omicron"] %>%
.[voc == "omicron" | voc == "delta" |
voc == "Positive" | voc == "positive" |
voc == "alpha" | voc == "Positive SARS-CoV-2", result := 1] %>%
.[voc == "negative" | voc == "SARS-CoV-2 Not Detected", result := 0] %>%
.[voc == "SARS-CoV-2 Not Detected" |
voc == "SARS-CoV-2 Inconclusive" | voc == "?SGTF" |
voc == "retest/inconsistent" | voc == "Positive" | voc == "positive" |
voc == "Positive SARS-CoV-2" | voc == "Inconclusive" |
voc == "inconclusive", voc := NA] %>%
.[is.na(ct_value), ct_value := NA] %>%
.[result == 0, ct_value := 45]
dt.symptoms <- fread("data/symptom_data_new.csv") %>%
setnames(., "start_date", "symptom_onset") %>%
.[, symptom_onset := dmy(symptom_onset)]
library(data.table)
library(lubridate)
library(patchwork)
library(rstan)
library(cowplot)
library(stringr)
source("R/stan_data.R")
source("R/custom_plot_theme.R")
source("scripts/dry_vs_wet.R")
library(data.table)
library(lubridate)
library(patchwork)
library(rstan)
library(cowplot)
library(stringr)
source("R/stan_data.R")
source("R/custom_plot_theme.R")
source("scripts/dry_vs_wet.R")
p.together
dt.ct <- fread("data/ct_values_updated_3.csv", drop = c("V7", "V8")) %>%
setnames(., c("Study number", "sample date", "swab type",
"Ct", "VOC"),
c("id", "date", "swab_type", "ct_value",
"voc")) %>%
.[, date := dmy(date)] %>%
.[voc == "Alpha", voc := "alpha"] %>%
.[voc == "Delta", voc := "delta"] %>%
.[voc == "Omicron", voc := "omicron"] %>%
.[voc == "OMicron", voc := "omicron"] %>%
.[voc == "Omicron/SGTF", voc := "omicron"] %>%
.[voc == "S gene present", voc := "omicron"] %>%
.[voc == "omicron" | voc == "delta" |
voc == "Positive" | voc == "positive" |
voc == "alpha" | voc == "Positive SARS-CoV-2", result := 1] %>%
.[voc == "negative" | voc == "SARS-CoV-2 Not Detected", result := 0] %>%
.[voc == "SARS-CoV-2 Not Detected" |
voc == "SARS-CoV-2 Inconclusive" | voc == "?SGTF" |
voc == "retest/inconsistent" | voc == "Positive" | voc == "positive" |
voc == "Positive SARS-CoV-2" | voc == "Inconclusive" |
voc == "inconclusive", voc := NA] %>%
.[is.na(ct_value), ct_value := NA] %>%
.[result == 0, ct_value := 45]
dt.symptoms <- fread("data/symptom_data_new.csv") %>%
setnames(., "start_date", "symptom_onset") %>%
.[, symptom_onset := dmy(symptom_onset)]
dt.all <- merge.data.table(dt.ct, dt.symptoms, all.x = TRUE,
by = c("id", "infection_id")) %>%
.[, t_first_test := as.numeric(date - min(date), units = "days"),
by = c("id", "infection_id")] %>%
.[, t_symp_onset := as.numeric(date - symptom_onset, units = "days"),
by = c("id", "infection_id")] %>%
.[, onset_rel :=  as.numeric(symptom_onset - min(date), units = "days"),
by = c("id", "infection_id")]
dt.all[swab_type == "VTM" & voc != "negative", ct_value_adjusted := ct_value*adjustment.dt[, mi]]
dt.all[swab_type != "VTM", ct_value_adjusted := ct_value]
dt.all[ct_value_adjusted == 45, ct_value_adjusted := NA]
dt.plot <- dt.all[,  `:=`  (result = factor(result,
levels = c(1, 0),
labels = c("Positive", "Negative")),
voc = factor(voc,
levels = c("alpha", "delta", "omicron", "negative"),
labels = c("Alpha", "Delta", "Omicron", "Negative")))]
mn <- dt.all[, min(ct_value_adjusted, na.rm = TRUE)]
mx <- dt.all[, max(ct_value_adjusted, na.rm = TRUE)]
# scale Ct values
dt.all[, ct_scaled := (ct_value_adjusted - mn)/(mx - mn)]
# choosing with voc to fit to
dt.ct.delta <- dt.all[(voc == "delta" | voc == "negative") & is.na(ct_value) == FALSE] %>%
.[t_first_test < 20 & t_first_test >= 0] %>%
.[, obs_total := .N, by = c("id", "infection_id")] %>%
.[, .SD[obs_total > 2], by = id] %>%
.[, day_rel := t_first_test + 5, units = "days", by = c("id", "infection_id")] %>%
.[, id := .GRP, by = id] %>%
.[order(id, day_rel)] %>%
.[order(id, day_rel, result),
c("id", "date", "ct_value", "ct_value_adjusted", "result", "day_rel")]
dt.ct.omicron <- dt.all[(voc == "omicron" | voc == "negative") & is.na(ct_value) == FALSE] %>%
.[t_first_test < 20 & t_first_test >= 0] %>%
.[, obs_total := .N, by = c("id", "infection_id")] %>%
.[, .SD[obs_total > 2], by = id] %>%
.[, day_rel := as.numeric(date - min(date) + 10, units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[order(id, day_rel)]
dt.ct.delta.pooled <- dt.all[(voc == "delta" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "t_first_test")]
dt.ct.omicron.pooled <- dt.all[(voc == "omicron" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "t_first_test")]
#--- pooled data
dt.ct.delta.pooled <- dt.all[(voc == "delta" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "t_first_test")]
dt.ct.omicron.pooled <- dt.all[(voc == "omicron" | voc == "negative") &
t_first_test < 20 & t_first_test >= 0 &
is.na(ct_value) == FALSE] %>%
#.[, day_rel := as.numeric(date - min(date), units = "days"), by = id] %>%
.[, id := .GRP, by = id] %>%
.[, c("id", "date", "infection_id", "ct_value",
"ct_value_adjusted", "ct_scaled", "result", "t_first_test")]
options(mc.cores = parallel::detectCores())
mod <- rstan::stan_model("stan/ct_trajectory_model_pooled.stan")
#--- fitting for delta
stan_data_delta <- stan_data_fun(dt.ct.delta.pooled)
fit_delta <- sampling(mod,
chains = 4,
data = stan_data_delta,
iter = 2000)
