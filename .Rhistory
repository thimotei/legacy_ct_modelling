cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs_known) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[exp_ct > 38 & (t < te | t > te + tp + ts + tlod), pcr_res := 0] %>%
.[exp_ct < 38 & t > te & t < te + tp + ts + tlod, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 2)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
simulate_ct_trajectories <- function(t_max, t_step,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs_known) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[exp_ct > 37 & (t < te | t > te + tp + ts + tlod), pcr_res := 0] %>%
.[exp_ct < 37 & t > te & t < te + tp + ts + tlod, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 2)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
ext_ct_dt[id == 6]
simulate_ct_trajectories <- function(t_max, t_step,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs_known) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[exp_ct > 36 & (t < te | t > te + tp + ts + tlod), pcr_res := 0] %>%
.[exp_ct < 36 & t > te & t < te + tp + ts + tlod, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 2)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 1)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
simulate_ct_trajectories <- function(t_max, t_step,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs_known) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[exp_ct > 35 & (t < te | t > te + tp + ts + tlod), pcr_res := 0] %>%
.[exp_ct < 35 & t > te & t < te + tp + ts + tlod, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 1)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
ext_ct_dt[id == 4]
sum(3.203026, 2.992574, 1.159341, 6.476368)
simulate_ct_trajectories <- function(t_max, t_step,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs_known) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[(t < te | t > te + tp + ts + tlod), pcr_res := 0] %>%
.[t > te & t < te + tp + ts + tlod, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 1)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
simulate_ct_trajectories <- function(t_max, t_step,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs_known) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[(t < te + 1 | t > te + tp + ts + tlod + 1), pcr_res := 0] %>%
.[t > te + 1 & t < te + tp + ts + tlod + 1, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 1)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[(t < te + 1 | t > te + tp + ts + tlod + 1), pcr_res := 0] %>%
.[t > te & t < te + tp + ts + tlod + 1, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
simulate_ct_trajectories <- function(t_max, t_step,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs_known) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_step)),
t = rep(t_input/t_step, n),
c0 = sort(rep(rep(c0, n), t_max/t_step)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_step)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_step)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_step)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_step)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_step)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_step))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs_known),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[(t < te + 1 | t > te + tp + ts + tlod + 1), pcr_res := 0] %>%
.[t > te & t < te + tp + ts + tlod + 1, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
ext_ct_dt <- simulate_ct_trajectories(30, 1, 0.3, 0.7, 0.2, 0.8, 1, 7, 1, 7, 1, 7, 5, 10, 1)
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = exp_ct_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
sum(3.203026, 2.992574, 1.159341, 6.476368)
simulate_ct_trajectories <- function(t_max, t_stepsize,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_stepsize)),
t = rep(t_input/t_stepsize, n),
c0 = sort(rep(rep(c0, n), t_max/t_stepsize)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_stepsize)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_stepsize)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_stepsize)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_stepsize)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_stepsize)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_stepsize))) %>%
.[, exp_ct := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, exp_ct := rtruncnorm(1, b = 40, mean = exp_ct, sd = sigma_obs),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[(t < te + 1 | t > te + tp + ts + tlod + 1), pcr_res := 0] %>%
.[t > te & t < te + tp + ts + tlod + 1, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, exp_ct_std := (exp_ct - min(exp_ct))/(40 - min(exp_ct))]
return(out_dt)
}
devtools::load_all()
devtools::load_all()
ext_ct_dt
simulate_ct_trajectories <- function(t_max, t_stepsize,
cp_min, cp_max,
cs_min, cs_max,
te_min, te_max,
tp_min, tp_max,
ts_min, ts_max,
tlod_min, tlod_max,
sigma_obs) {
out_dt <- data.table(id = sort(rep(1:n, t_max/t_stepsize)),
t = rep(t_input/t_stepsize, n),
c0 = sort(rep(rep(c0, n), t_max/t_stepsize)),
cp = sort(rep(runif(n, cp_min, cp_max), t_max/t_stepsize)),
cs = sort(rep(runif(n, cs_min, cs_max), t_max/t_stepsize)),
te = sort(rep(runif(n, te_min, te_max), t_max/t_stepsize)),
tp = sort(rep(runif(n, tp_min, tp_max), t_max/t_stepsize)),
ts = sort(rep(runif(n, ts_min, ts_max), t_max/t_stepsize)),
tlod = sort(rep(runif(n, tlod_min, tlod_max), t_max/t_stepsize))) %>%
.[, ct_value := ct_hinge_long(t, c0 = c0, cp = cp, cs = cs,
clod = clod, te = te, tp = tp, ts = ts,
tlod = tlod),
by = c("id", "t")] %>%
.[, ct_value := rtruncnorm(1, b = 40, mean = ct_value, sd = sigma_obs),
by = c("id")] %>%
.[, t := as.numeric(t)] %>%
.[(t < te + 1 | t > te + tp + ts + tlod + 1), pcr_res := 0] %>%
.[t > te & t < te + tp + ts + tlod + 1, pcr_res := 1] %>%
.[, pcr_res := factor(pcr_res)] %>%
.[, ct_value_std := (ct_value - min(ct_value))/(40 - min(ct_value))]
return(out_dt)
}
# simulating trajectories. all parameters are sampled from uniform distributions
# where the minimum and maximum of each are arguments of the simulating
# function
ext_ct_dt <- simulate_ct_trajectories(t_max = 30, t_stepsize = 1,
cp_min = 0.3, cp_max = 0.7,
cs_min = 0.2, cs_max = 0.8,
te_min = 1, te_max = 7,
tp_min = 1, tp_max =7,
ts_min = 1, ts_max = 7,
tlod_min = 5, tlod_max = 10,
sigma_obs = 1)
# quick plot of simulated data
ext_ct_dt %>%
ggplot() +
geom_point(aes(x = t, y = ct_value_std, colour = pcr_res)) +
facet_wrap(vars(id)) +
custom_plot_theme()
# loading all functions in package directory
devtools::load_all()
stan_data_fun <- function(input_data, simulated = FALSE) {
mn <- input_data[, min(exp_ct_std, na.rm = TRUE)]
if(simulated == TRUE) {
mx <- 40
}
else {
mx <- input_data[, max(exp_ct_std, na.rm = TRUE)]
}
stan_data <- list(N = input_data[, .N],
P = length(unique(input_data$id)),
id = input_data[, id],
day_rel = input_data[, t],
ct_value = ifelse(is.na(input_data$ct_value), -99, input_data$ct_standarised),
pcr_res = input_data[, as.numeric(pcr_res)],
t_e = 0,
c_0 = (40 - mn)/(mx - mn),
c_lod = (40 - mn)/(mx - mn),
lmean = get_inc_period()$inc_mean_p[1],
lsd = get_inc_period()$inc_sd_p[2]
)
return(stan_data)
}
# loading all functions in package directory
devtools::load_all()
stan_data_simulated <- stan_data(ext_ct_dt, simulated = TRUE)
stan_data_simulated <- stan_data_fun(ext_ct_dt, simulated = TRUE)
stan_data_fun <- function(input_data, simulated = FALSE) {
mn <- input_data[, min(ct_value_std, na.rm = TRUE)]
if(simulated == TRUE) {
mx <- 40
}
else {
mx <- input_data[, max(ct_value_std, na.rm = TRUE)]
}
stan_data <- list(N = input_data[, .N],
P = length(unique(input_data$id)),
id = input_data[, id],
day_rel = input_data[, t],
ct_value = ifelse(is.na(input_data$ct_value), -99, input_data$ct_standarised),
pcr_res = input_data[, as.numeric(pcr_res)],
t_e = 0,
c_0 = (40 - mn)/(mx - mn),
c_lod = (40 - mn)/(mx - mn),
lmean = get_inc_period()$inc_mean_p[1],
lsd = get_inc_period()$inc_sd_p[2]
)
return(stan_data)
}
stan_data_simulated <- stan_data_fun(ext_ct_dt, simulated = TRUE)
input_data <- ext_ct_dt
N = input_data[, .N]
P = length(unique(input_data$id))
id = input_data[, id]
day_rel = input_data[, t]
ct_value = ifelse(is.na(input_data$ct_value), -99, input_data$ct_standarised)
stan_data_fun <- function(input_data, simulated = FALSE) {
mn <- input_data[, min(ct_value_std, na.rm = TRUE)]
if(simulated == TRUE) {
mx <- 40
}
else {
mx <- input_data[, max(ct_value_std, na.rm = TRUE)]
}
stan_data <- list(N = input_data[, .N],
P = length(unique(input_data$id)),
id = input_data[, id],
day_rel = input_data[, t],
ct_value = ifelse(is.na(input_data$ct_value), -99, input_data$ct_value_std),
pcr_res = input_data[, as.numeric(pcr_res)],
t_e = 0,
c_0 = (40 - mn)/(mx - mn),
c_lod = (40 - mn)/(mx - mn),
lmean = get_inc_period()$inc_mean_p[1],
lsd = get_inc_period()$inc_sd_p[2]
)
return(stan_data)
}
stan_data_simulated <- stan_data_fun(ext_ct_dt, simulated = TRUE)
options(mc.cores = 8)
extract_ct_fits <- function(ct_dt_draws) {
ct_dt_out <- ct_dt_draws[, c("id", "time") := tstrsplit(variable, ",")] %>%
.[, id := str_remove(id, "ct\\[")] %>%
.[, time := str_remove(time, "]")] %>%
.[, time := as.numeric(time)] %>%
.[, id := factor(id)] %>%
.[, c("time", "iteration", "chain", "id", "value")] %>%
.[order(id, time)] %>%
.[,  value_unscaled := (mx - mn) * value + mn]
return(ct_dt_out)
}
draws <- fit_sim$draws()
draws_dt <- as.data.table(draws)
ct_dt_draws_clean <- extract_ct_fits(draws_dt[variable %like% "ct"])
plot_ct_trajectories <- function(ct_dt_draws) {
p_out <- ct_dt_draws %>%
ggplot(aes(x = time)) +
geom_line(aes(y = me)) +
geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.2) +
geom_point(data = ext_ct_dt, aes(x = t, y = exp_ct, colour = factor(pcr_res))) +
facet_wrap(vars(factor(id))) +
custom_plot_theme()
return(p_out)
}
plot_ct_trajectories(ct_dt_draws_summary)
plot_ct_trajectories <- function(ct_dt_draws, ct_dt) {
p_out <- ct_dt_draws %>%
ggplot(aes(x = time)) +
geom_line(aes(y = me)) +
geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.2) +
geom_point(data = ext_ct_dt, aes(x = t, y = ct_value, colour = factor(pcr_res))) +
facet_wrap(vars(factor(id))) +
custom_plot_theme()
return(p_out)
}
plot_ct_trajectories <- function(ct_dt_draws, ct_dt) {
p_out <- ct_dt_draws %>%
ggplot(aes(x = time)) +
geom_line(aes(y = me)) +
geom_ribbon(aes(ymin = lo, ymax = hi), alpha = 0.2) +
geom_point(data = ct_dt, aes(x = t, y = ct_value, colour = factor(pcr_res))) +
facet_wrap(vars(factor(id))) +
custom_plot_theme()
return(p_out)
}
plot_ct_trajectories(ct_dt_draws_summary, ext_ct_dt)
ct_trajectory_summarise <- function(ct_dt_draws) {
ct_dt_summary_out <- ct_dt_draws[, .(me = quantile(value_unscaled, c(0.5)),
lo = quantile(value_unscaled, c(0.025)),
hi = quantile(value_unscaled, c(0.975))),
by = c("id", "time")]
return(ct_dt_summary_out)
}
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
ct_dt_draws
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"])
ct_dt_draws
ct_dt_draws
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
ct_dt_draws_summary
draws_dt <- as.data.table(fit_sim$draws())
draws_dt
draws_dt <- as.data.table(fit_sim$draws())
# extracting Ct fits. Bit slow as it is at the moment
ct_dt_draws <- extract_ct_fits(draws_dt[variable %like% "ct"])
# summarising trajectories using median and 95% CrI
ct_dt_draws_summary <- ct_trajectory_summarise(ct_dt_draws)
